# Generated by Django 3.2 on 2021-05-02 12:10

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('applications', '0001_initial'),
        ('additional', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractBaseContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator(code='mismatch', message='Length has to be 16', regex='^.{16}$')])),
                ('title', models.CharField(max_length=64)),
                ('views', models.IntegerField(default=0)),
                ('likes', models.IntegerField(default=0)),
                ('dislikes', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(8)])),
                ('title', models.CharField(max_length=64)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to='applications.channel')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('on_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='content.abstractbasecontent')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='comments', to='applications.channel')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('abstractbasecontent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.abstractbasecontent')),
                ('short_videos', django.contrib.postgres.fields.ArrayField(base_field=models.FileField(upload_to=''), max_length=5, size=None)),
                ('on_channel', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='status', to='applications.channel')),
            ],
            options={
                'verbose_name_plural': 'Statuses',
            },
            bases=('content.abstractbasecontent',),
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('abstractbasecontent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.abstractbasecontent')),
                ('video', models.FileField(upload_to='')),
                ('type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Musics'), (2, 'Sports'), (3, 'Gaming'), (4, 'News'), (5, 'Live'), (6, '360 Video')])),
                ('description', models.TextField()),
                ('copyrights', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(8)]), blank=True, size=None)),
                ('on_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='applications.channel')),
                ('playlist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contents', to='content.playlist')),
                ('restrictions', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='additional.restrictions')),
            ],
            bases=('content.abstractbasecontent',),
        ),
        migrations.CreateModel(
            name='CommunityContent',
            fields=[
                ('abstractbasecontent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.abstractbasecontent')),
                ('text', models.TextField()),
                ('on_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_contents', to='applications.channel')),
            ],
            bases=('content.abstractbasecontent',),
        ),
    ]
